% Generator of random elements from generators of a group.
% 
% A random bag is a set of random group elements that always generates
% the group; random elements are provided by multiplying elements of the
% bag and returning one element of the product which is removed from the bag.
% 
% Straight-forward implementation of PRINITIALIZE and PRRANDOM of 
% section 3.2.2, pp. 70-71 of Holt 2005 (Handbook of Computational Group Theory)
classdef RandomBag < handle
    
    properties
        x0
        x % matrix representing the contents of the bag, where each element is a row vector
    end

    methods
        
        function res = sample(self)
            r = size(self.x, 1);
            s = randi(r);
            t = randi(r);
            while t == s
                t = randi(r);
            end
            if randi(2) == 2
                if randi(2) == 2 % e = 1
                    self.x(s,:) = GenPerm.compose(self.x(s,:), self.x(t,:));
                else
                    tinv = GenPerm.inverse(self.x(t,:));
                    self.x(s,:) = GenPerm.compose(self.x(s,:), tinv);
                end
                self.x0 = GenPerm.compose(self.x0, self.x(s,:));
            else
                if randi(2) == 2 % e = 1
                    self.x(s,:) = GenPerm.compose(self.x(t,:), self.x(s,:));
                else
                    tinv = GenPerm.inverse(self.x(t,:));
                    self.x(s,:) = GenPerm.compose(tinv, self.x(s,:));
                end
                self.x0 = GenPerm.compose(self.x(s,:), self.x0);
            end
            res = self.x0;
        end
        
        function self = RandomBag(generators, r, n)
        % Constructs a random bag from the given generators
        %
        % Generators are generalized permutations, given as row vectors
        % of a N x m matrix, where N is the number of generators
        % and those generators act on -m...-1, 1...m.
        %
        % At least one generator must be provided.
        %
        % The identity can be part of the generators, which is useful
        % to handle the edge case of a random bag generated by the identity
        % (which will always return the identity).
        %
        % r is the number of elements in the bag, and n
        % the number of shuffles done during initialization
            if nargin < 3
                n = 2;
            end
            if nargin < 2
                r = -1;
            end
            k = size(generators, 1); % number of generators
            m = size(generators, 2); % domain size
            assert(k >= 1);
            x = zeros(r, m);
            if r < k || r < 10
                r = max(k, 10);
            end
            g = 1;
            for i = 1:r
                x(i, :) = generators(g, :);
                g = g + 1;
                if g > k
                    g = 1;
                end
            end
            self.x0 = 1:m; % identity
            self.x = x;
            for i = 1:n
                self.sample; % perform initial shuffles
            end
        end
   
    end
    
end
